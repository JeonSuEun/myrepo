git clone <url> [local dir name](여기서 local dir name을 안주면 현재 디렉토리에~)
.으로 시작하는 파일들은 ls -al로 봄

git init -> .git 디렉토리 생성
git add eval.c
git status로 확인(untracked files, 스테이지 영역에 추가된 파일)
git commit -m "Initial Project Version" => staged된 파일을 commit  
git add Makefile *.c *.h(나머지 파일들 스테이지~)
git commit -m "Initial File group 2"(나머지 커밋)
위에서 작업해준 파일들은 모두 unmodified상태(working directory에 있는 내용과 repository내용이 똑같은 상태)
여기서 vi eval.c에서 int global; 추가해 변경시켜주면 modified상태
다시 repository에 집어넣으려면 git add eval.c
git restore --staged eval.c (staged에서 뺌)

git config --global core.editor vi => vi로 editor 바꾸기
git commit eval.c (메세지를 안줬을때 vi가 열림 commit메시지 넣어주기)
This is second commit on eval.c 이런식으로 vi에 넣어주기

calc.c에 vi로 int i;추가 => git status => calc.c가 modified상태다!
=>git add calc.c => calc.c가 staged된 상태다!

git diff --cached
a/calc.c(staged된) b/calc.c 다르다!(달라진 부분 int i;)

git branch experimental(브랜치의 생성)
git branch(리스트 확인)
git checkout experimental(이 브랜치로 변경)
이 브랜치에서 작업~~(newfunction.c, 등 작업)
git checkout master(원래 브랜치로 변경)
이 브랜치에는 작업한게 없음
==> 두개의 버전 만들 수 있다!
git log --graph (젤 위가 어떤 브랜치인지 메인상태~ 상태 밑에들은 공통)

master(main) branch에서 git merge experimental => 합치기!

https://mega.nz/file/ABNUnI4Q#rpfFg6WlJ7ZCpDnzTpjW9IQlTelxyB7VwUtz6XIHflI

https://jeonsueun.github.io/myrepo/

git clone https://github.com/JeonSuEun/myrepo.git

복사 Ctrl + c  붙여넣기 우클릭

token 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 (token-for-demo)

private한 파일에 접근하려면 id입력후 비밀번호에 토큰 입력

ssh keys (ssh로 접근)
/home/jse/.ssh에서
ssh-keygen -t ed25519 -C "tndmsvkdlxj@gmail.com"
id_ed25519 / qwer
이러면 2개의 파일 만들어짐
id_ed25519(비밀키) / id_ed25519.pub(공개키)
github 들어가서 setting에 ssh key 생성에서 id_ed25519.pub을 cat해서 나오는 값을 넣어줌
/home/jse/.ssh에서 vi config해서 만들어주고
Host github.com
        IdentityFile ~/.ssh/id_ed25519 => 비밀키
        User git
==>githun.com에 접근할때 id_ed25519를 사용해서 접근  (상대가 공개키를 가지고 있으면 내쪽에서는 비밀키로 연결)
ssh -T git@github.com
yes 후 비밀번호 qwer입력
git clone git@github.com:JeonSuEun/myrepo.git
qwer 입력

과제
1. Fork
2. git clone https://github.com/SuEunJeon/calculator.git
3.calculator.c 수정
  git add calculator.c
  git commit -m " "
4.git push https://github.com/SuEunJeon/calculator
token-sueun(naver계정) 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
5. pull request (git에서 new pull request)

매직넘버 => 소스코드 안에 숫자로 젹혀 있는 것
int termA = 1000000; => signed 32bit.
int termA = 1000000; => signed 32bit.
termA * termB => 1조 => 21억초과 => OVERFLOW

3.14 = 0.314(만티사) * 10^1(지수)
0.314 = 0.314 * 10^0
0.0314 = 0.314 * 10^-1
31.4 = 0.314 * 10^2

1000000.0 + 0.1 = ?
0.10000xxx1 * 10^6 근데 만티사에서 표현 할 수 있는 소수 제한되있으니 표현 안됨 0.1이
동치 비교 => float(4byte) double(8byte)는 정확하게 값이 안나올 수 있다.
float보다 double이 정밀
정수형 사용 => 1.22 보다는 122를 사용해서 반올림해서 없어지는 그런 상황 대비
동치 비교를 할거면 두 값의 차이가 일정한 범위 내 일때를 조건으로해서 비교

c에서 하나의 문자 '\0'더 넣어야하는 거 조심
c는 unicode지원 어려움 java는 괜찮
internationalization = i18n(국제화)
Localization=l10n(지역화)

명명된 상수(const,final...)

Array_length 매크로 => 배열의 원소가 몇개가 있는지 알수 있음




